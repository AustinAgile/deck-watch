# Deployment
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: deck-watch
  labels:
    app: deck-watch
  annotations:
    deployment.kubernetes.io/revision: "1"
  generation: 1
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: deck-watch
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      name: deck-watch
      labels:
        app: deck-watch
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9143"
        prometheus.io/interval: 5s
    spec:
      containers:
      - name: deck-watch
        image: matr/deck-watch:1.3.0
        imagePullPolicy: Always
        command: ["node", "code/shell"]
        ports:
        - containerPort: 80
          name: prometheus
        volumeMounts:
          - name: code
            mountPath: /usr/src/apps/deck-watch
          - name: docker
            mountPath: /var/run/docker.sock
        resources: {}
        securityContext:
          privileged: false
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        lifecycle:
           postStart:
             exec:
               command: ["/bin/sh", "-c", "rm -rf /usr/src/apps/mock-ti/node_modules/.bin", "cp -a /usr/src/apps/mock-ti/. /usr/src/apps/dev"]
        readinessProbe:
          httpGet:
            path: /probes/readiness
            port: 80
          initialDelaySeconds: 2
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /probes/liveness
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
       - name: code
         hostPath:
           path: /development/github/kubernetes/deck-watch
       - name: docker
         hostPath:
           path: /var/run/docker.sock
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 5
